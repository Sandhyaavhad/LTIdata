# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- none

pool:
  vmImage: windows-latest

variables:
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '**/*.sln'
- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'Dotnetapplicationservice-connection'
    organization: 'sample-dotnet-org'
    scannerMode: 'MSBuild'
    projectKey: 'dotnetapp-key'
    projectName: 'dotnetapp-project'
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '**/*.sln'
    arguments: '--configuration $(BuildConfiguration)'
- task: SonarCloudAnalyze@1
- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'
- task: sonarcloud-buildbreaker@2
  inputs:
    SonarCloud: 'Dotnetapplicationservice-connection'
    organization: 'sample-dotnet-org'
    
# - task: DotNetCoreCLI@2
#   displayName: Test
#   inputs:
#     command: test
#     projects: '$(Parameters.TestProjects)'
#     arguments: '--configuration $(BuildConfiguration)'
#   enabled: false

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
    zipAfterPublish: True

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
    ArtifactName: 'Dontnet-Artifact'
  condition: succeededOrFailed()
- task: ArtifactoryGenericUpload@2
  inputs:
    artifactoryService: 'Jfrogconnection'
    specSource: 'taskConfiguration'
    fileSpec: |
      {
        "files": [
          {
            "pattern": "*.zip",
            "target": "dotnetsample-generic-local/upload/"
          }
        ]
      }
    collectBuildInfo: true
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)'
    failNoOp: true
- pwsh: Install-Module powershell-yaml -Force
- pwsh: |
    $content = Get-Content -Path $(System.DefaultWorkingDirectory)/azure-pipelines.yml -Raw
    $correct = true
    try {
      $obj = ConvertFrom-Yaml $content
      Write-Host $obj
      }
    catch {
        Write-Host "An error occurred:"
         
        $correct = false
    }
       

        
    Write-Host $correct
